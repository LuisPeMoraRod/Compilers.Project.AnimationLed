program := {procedure}

procedure := Procedure IDENT "(" {params} ")" "{" {statement} "}"

statement := IDENT "=" (expression | list) ";"
    | IDENT compoundIdent "=" compoundDeclaration ";"
    | If comparison "{" {statement} "}" ";"
    | IDENT squareBrackets "=" ("[" boolean listValues "]" | boolean)
    | IDENT squareBrackets "." ("Neg" | "T" | "F")
    | "Blink" "(" IDENT {squareBrackets} "," number "," "'" ("Mil" "Seg" "Min") "'" "," boolean ")" ";" 

params ::= {IDENT ","} {IDENT}
comparison ::= expression (("==" | "!=" | ">" | ">=" | "<" | "<=") expression)+
expression ::= term {( "-" | "+" ) term}
term ::= unary {( "/" | "*" ) unary}
unary ::= ["+" | "-"] module
module := exp {("%" exp)}
exp := primary {"**" }
primary ::= boolean | number | ident{squareBrackets} | "(" expression ")"

list ::= "[" (boolean ",")*7 boolean "]"

squareBrackets := "[" (number {":" number}| ":" "," number ) "]"

compoundIdent := {"," IDENT compoundIdent}

listValues := ("," boolean listValues | epsilum)